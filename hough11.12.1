PImage img;
int i;
int j;
float theta = 0;
float thetaincrement = 0.04; //was 0.01
int locRes = 1; //location pixel resulution, highest resulution at 1 

//points of intersection for the +tolerance line
float px1, px2, py1, py2;

int dx1 = 103,
    dx2 = 10,
    dy1 = 104,
    dy2 = 10;//debug starting values for x and y


int imgH = 500;
int imgW = 500;
int picSize = imgW + (imgH*imgW);

float[][][] PicData = new float[imgW + (imgH*imgW)][round(PI/thetaincrement)+1][5]; //loc, theta and information
/*
PicData[loc][theta][0] = line pixel sum
PicData[loc][theta][1] = P value for hough transform
PicData[loc][theta][2] = x location
PicData[loc][theta][3] = y location
PicData[loc][theta][4] = theta
*/

float[][] lineSums = new float[imgW + (imgH*imgW)][5]; //loc and theta
//float[][] hough = new float[round(sqrt(2*(500*500)))+1][round(PI/thetaincrement)+1]; //P and theta



void setup() {
 size(500, 500); 
 background(0);
 frameRate(100);
 img = loadImage("testpic.png");
 //img = loadImage("pic.png");
 image(img, 0, 0, imgW+1, imgH+1);
 loadPixels(); 
 updatePixels();
 
  println("starting...");
 
 
 noLoop();
}
//
void draw() {
   //println(mouseX+" : "+ mouseY + " : "+ brightness(pixels[loc(mouseX, mouseY)]));
  //draws image and preps it for analysis
  clear();
 image(img, 0, 0, imgW+1, imgH+1);

loadPixels(); 
updatePixels();

 noFill();
 stroke(255);
 rect(dx1, dy1, dx2, dy2);
 
//GetImgData();
GetImgDataDebug();
println("Sorting...");
SortLineArrays();


for(int loc = loc(dx1, dy1); loc < loc(dx1+dx2, dy2+dy2);loc++) {
 for(int theta = 0; theta < 3; theta++) {
   println(loc + " : " + theta +  " ::: " + PicData[loc][theta][0]);
 }
}


println("DONE");


 /*
  i = mouseX;
  j = mouseY;
  theta += 0.005;
  GetIntersectPlus(theta, i, j);
  println(LineMarch());
  strokeWeight(1);
  color(0, 255, 0);
  line(px1, py1, px2, py2);
  */
}

void GetImgDataDebug() {
  int thetaStep = 0;
    
  for(i = dx1; i < dx2 + dx1; i += locRes) {
    for(j = dy1; j < dy2 + dy1; j += locRes) {
println(i +" : "+ j);
      if(brightness(pixels[loc(i,j)]) > 0) {
        thetaStep = 0;
        for(theta = thetaincrement; theta < PI; theta += thetaincrement) {
          check();
          GetIntersectPlus(theta, i, j);
          
          println(i +" : "+ j + " : " + LineMarch());
          PicData[loc(i,j)][thetaStep][0] = LineMarch();
          PicData[loc(i,j)][thetaStep][1] = Pval(i, j, theta); //value for hough transform
          PicData[loc(i,j)][thetaStep][2] = i;//location
          PicData[loc(i,j)][thetaStep][3] = j; //location
          //lineSums[loc(i,j)][thetaStep] = LineMarch();
          thetaStep++;
        }
      }
    
    }
  }

}


void SortLineArrays() { //bubble sort
  boolean sorted = false;
  float[][][] temp_array = new float[imgW + (imgH*imgW)][(round(PI/thetaincrement)+1)][5];
  while(!sorted) {
    sorted = true;
    for (int loc = 0; loc < picSize; loc++) {
      for(int anglestep = 0; anglestep < (round(PI/thetaincrement)); anglestep++) {
        if(PicData[loc][anglestep][0] < PicData[loc][anglestep+1][0]) {
          for(int i = 0; i < 5; i++) {
            temp_array[loc][anglestep][i] = PicData[loc][anglestep][i];
          }
          for(int i = 0; i < 5; i++) {
            PicData[loc][anglestep][i] = PicData[loc][anglestep+1][i];
          }
          for(int i = 0; i < 5; i++) {
            PicData[loc][anglestep+1][i] = temp_array[loc][anglestep][i];
          }
          sorted = false;
        }
      }
    }
  }

}




void GetImgData() {
  int thetaStep = 0;
    
  for(i = 0; i < imgW; i += locRes) {
    for(j = 0; j < imgH; j += locRes) {
//println(i +" : "+ j);
      if(brightness(pixels[loc(i,j)]) > 0) {
        thetaStep = 0;
        for(theta = thetaincrement; theta < PI; theta += thetaincrement) {
          check();
          GetIntersectPlus(theta, i, j);
          
          println(i +" : "+ j + " : " + LineMarch());
          PicData[loc(i,j)][thetaStep][0] = LineMarch();
          PicData[loc(i,j)][thetaStep][1] = Pval(i, j, theta); //value for hough transform
          PicData[loc(i,j)][thetaStep][2] = i;//location
          PicData[loc(i,j)][thetaStep][3] = j; //location
          //lineSums[loc(i,j)][thetaStep] = LineMarch();
          thetaStep++;
        }
      }
    
    }
  }

}

float Pval (int i, int j, float theta) {
 float P = (i*cos(theta)) + (j*sin(theta));
  return P;  
}

int loc(int x, int y) { //converts cartesian coordinates to pixel coordinates
 int loc = (x + (y * imgW)); 
 return loc; 
}

int LineMarch() { //"Marches" along the line, adding up all the pixel values
  int linesum = 0;
  float rx, ry;
  int t = 0;
  float d = dist(px1, py1, px2, py2);
  
  strokeWeight(1);
  stroke(255);
  for(t = 0; t < d; t++) {
    rx = px1 + (t/d)*(px2-px1); //parameretrize the line
    ry = py1 + (t/d)*(py2-py1);
    //stroke(255);
    //point(floor(rx), floor(ry));
        if (0 < rx && rx < imgW && 0 < ry && ry < imgH) { //sums pixels in the "box"
      linesum += brightness(pixels[loc(floor(rx), floor(ry))]);
    }
  }
  
  return linesum;
  }

//finds lines intersections with the edges of the image for the +angle tolerance line
void GetIntersectPlus(float theta, int i, int j) {
  //converts to y = mx + b
  float m = -(cos(theta)) / (sin(theta));
  float PPlus = (i*cos(theta)) + (j*sin(theta));
  float b = PPlus / sin(theta);

  //checks y intercept when x = 0
  if(line(0, theta, i, j) < 0) { //if y intercept is < 0
    py1 = 0;
    px1 = -b / m;
  }
  //if 0 <= y intercept <= height
  else if(0 <= line(0, theta, i, j) && line(0, theta, i, j) <= imgH) {
    px1 = 0;
    py1 = b;
  } else { // y intercept > height
    py1 = imgH;
    px1 = (imgH - b) / m;
  }

    //checks y intercept when x = img.width
  if(line(imgW, theta, i, j) < 0) { //if y intercept is < 0
    py2 = 0;
    px2 = (-b/m);
  }
  //if 0 <= y intercept <= height
  else if(0 <= line(imgW, theta, i, j) && line(imgW, theta, i, j) <= imgH) {
    px2 = imgW;
    py2 = (m * imgW) + b;
  } else { // y intercept > height
    py2 = imgH;
    px2 = (imgH - b) / m;
  }
 
 }


void check() {
 if (theta == PI/2) {
  theta += thetaincrement; 
 }
}

float line(int x, float theta, int i, int j) {
  float PPlus = (i*cos(theta)) + (j*sin(theta));
  float y = (PPlus - (x*cos(theta)))/( sin(theta) );
  return y;
}


void visualshit() {
  strokeWeight(1);
  //stroke(255, 0, 0); //red
  //line(0, line(0, theta, i, j), img.width, line(img.width, theta, i, j));
  stroke(0, 255, 0 );
  strokeWeight(5);
  point(i,j);
}

void printlnstat() {
  println(px1 +" : "+ py1 + "\n" + px2 +" : "+ py2);
  println("\n");
  println("\n");
  }
